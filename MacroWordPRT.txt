
 
'***************************************************************************'*
'* AUTHOR & DATE:   STEPHEN BULLEN, Office Automation Ltd
'*                  15 November 1998


'*
'* DESCRIPTION:     Creates a standard Picture object from whatever is on the clipboard.
'*                  This object can then be assigned to (for example) and Image control
'*                  on a userform.  The PastePicture function takes an optional argument of
'*                  the picture type - xlBitmap or xlPicture.
'*
'*                  The code requires a reference to the "OLE Automation" type library
'*
'*                  The code in this module has been derived from a number of sources
'*                  discovered on MSDN.
'*
'*                  To use it:
'*                      Set Image1.Picture = PastePicture(xlPicture)
'*                  to paste a picture of whatever is on the clipboard into a standard image control.
'*
'* PROCEDURES:
'*   PastePicture   The entry point for the routine
'*   CreatePicture  Private function to convert a bitmap or metafile handle to an OLE reference
'*   fnOLEError     Get the error text for an OLE error code
'***************************************************************************
'Option Private Module
Option Explicit
Option Compare Text


''' User-Defined Types for API Calls


'Declare a UDT to store a GUID for the IPicture OLE Interface
Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type


'''Windows API Function Declarations
#If VBA7 Then


Private Type uPicDesc
    Size As Long
    Type As Long
    hPic As LongPtr
    hPal As LongPtr
End Type



Private Type GUID_TYPE
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type
Declare Function CoCreateGuid Lib "ole32" (ByRef GUID As Byte) As Long
'Does the clipboard contain a bitmap/metafile?
Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Integer) As Long


'Open the clipboard to read
Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hWnd As LongPtr) As Long


'Get a pointer to the bitmap/metafile
Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As LongPtr


'Close the clipboard
Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long


'Convert the handle into an OLE IPicture interface.
Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32.dll" (PicDesc As uPicDesc, RefIID As GUID, ByVal fPictureOwnsHandle As LongPtr, IPic As IPicture) As Long


'Create our own copy of the metafile, so it doesn't get wiped out by subsequent clipboard updates.
Declare PtrSafe Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As LongPtr, ByVal lpszFile As String) As LongPtr


'Create our own copy of the bitmap, so it doesn't get wiped out by subsequent clipboard updates.
Declare PtrSafe Function CopyImage Lib "user32" (ByVal Handle As LongPtr, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As LongPtr


#Else


'Declare a UDT to store the bitmap information
Private Type uPicDesc
    Size As Long
    Type As Long
    hPic As Long
    hPal As Long
End Type


'Does the clipboard contain a bitmap/metafile?
Private Declare Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Integer) As Long


'Open the clipboard to read
Private Declare Function OpenClipboard Lib "user32" (ByVal hWnd As Long) As Long


'Get a pointer to the bitmap/metafile
Private Declare Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long


'Close the clipboard
Private Declare Function CloseClipboard Lib "user32" () As Long


'Convert the handle into an OLE IPicture interface.
Private Declare Function OleCreatePictureIndirect Lib "olepro32.dll" (PicDesc As uPicDesc, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long


'Create our own copy of the metafile, so it doesn't get wiped out by subsequent clipboard updates.
Declare Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As Long, ByVal lpszFile As String) As Long


'Create our own copy of the bitmap, so it doesn't get wiped out by subsequent clipboard updates.
Declare Function CopyImage Lib "user32" (ByVal Handle As Long, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As Long


#End If




'The API format types we're interested in
Const CF_BITMAP = 2
Const CF_PALETTE = 9
Const CF_ENHMETAFILE = 14
Const IMAGE_BITMAP = 0
Const LR_COPYRETURNORG = &H4

 
   


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: PastePicture
'''
''' Purpose:    Get a Picture object showing whatever's on the clipboard.
'''
''' Arguments:  lXlPicType - The type of picture to create.  Can be one of:
'''                          xlPicture to create a metafile (default)
'''                          xlBitmap to create a bitmap
'''
''' Date        Developer           Action
''' ------------------------------------------------------c--------------------
''' 30 Oct 98   Stephen Bullen      Created
''' 15 Nov 98   Stephen Bullen      Updated to create our own copies of the clipboard images
'''


Function PastePicture(Optional lXlPicType As Long = xlPicture) As IPicture


#If VBA7 Then
PastePictureVBA7 (lXlPicType)
#Else
PastePictureWin32 (lXlPicType)
#End If


End Function


Function PastePictureVBA7(Optional lXlPicType As Long = xlPicture) As IPicture


    'Some pointers
    Dim H As Long, hPicAvail As Long, hPtr As LongPtr, hPal As LongPtr, lPicType As Long, hCopy As LongPtr
    
    'Convert the type of picture requested from the xl constant to the API constant
    lPicType = IIf(lXlPicType = xlBitmap, CF_BITMAP, CF_ENHMETAFILE)
    
    'Check if the clipboard contains the required format
    hPicAvail = IsClipboardFormatAvailable(lPicType)
    
    If hPicAvail <> 0 Then
        'Get access to the clipboard
        H = OpenClipboard(0&)
    
        If H > 0 Then
            'Get a handle to the image data
            hPtr = GetClipboardData(lPicType)
    
            'Create our own copy of the image on the clipboard, in the appropriate format.
            If lPicType = CF_BITMAP Then
                hCopy = CopyImage(hPtr, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
            Else
                hCopy = CopyEnhMetaFile(hPtr, vbNullString)
            End If
    
            'Release the clipboard to other programs
            H = CloseClipboard
    
            'If we got a handle to the image, convert it into a Picture object and return it
            If hPtr <> 0^ Then Set PastePictureVBA7 = CreatePictureVBA7(hCopy, 0, lPicType)
        End If
    End If


End Function

Private Function CreatePicture(ByVal hPic As Long, ByVal hPal As Long, ByVal lPicType) As IPicture


' IPicture requires a reference to "OLE Automation"
Dim r As Long, uPicInfo As uPicDesc, IID_IDispatch As GUID, IPic As IPicture


'OLE Picture types
Const PICTYPE_BITMAP = 1
Const PICTYPE_ENHMETAFILE = 4


' Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
    .Data1 = &H7BF80980
    .Data2 = &HBF32
    .Data3 = &H101A
    .Data4(0) = &H8B
    .Data4(1) = &HBB
    .Data4(2) = &H0
    .Data4(3) = &HAA
    .Data4(4) = &H0
    .Data4(5) = &H30
    .Data4(6) = &HC
    .Data4(7) = &HAB
End With


' Fill uPicInfo with necessary parts.
With uPicInfo
    .Size = Len(uPicInfo)                                                   ' Length of structure.
    .Type = IIf(lPicType = CF_BITMAP, PICTYPE_BITMAP, PICTYPE_ENHMETAFILE)  ' Type of Picture
    .hPic = hPic                                                            ' Handle to image.
    .hPal = IIf(lPicType = CF_BITMAP, hPal, 0)                              ' Handle to palette (if bitmap).
End With


' Create the Picture object.
r = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, IPic)


' If an error occured, show the description
If r <> 0 Then Debug.Print "Create Picture: " & fnOLEError(r)


' Return the new Picture object.
Set CreatePicture = IPic


End Function
Function PastePictureWin32(Optional lXlPicType As Long = xlPicture) As IPicture


    'Some pointers
    Dim H As Long, hPicAvail As Long, hPtr As Long, hPal As Long, lPicType As Long, hCopy As Long
    
    'Convert the type of picture requested from the xl constant to the API constant
    lPicType = IIf(lXlPicType = xlBitmap, CF_BITMAP, CF_ENHMETAFILE)
    
    'Check if the clipboard contains the required format
    hPicAvail = IsClipboardFormatAvailable(lPicType)
    
    If hPicAvail <> 0 Then
        'Get access to the clipboard
        H = OpenClipboard(0&)
    
        If H > 0 Then
            'Get a handle to the image data
            hPtr = GetClipboardData(lPicType)
    
            'Create our own copy of the image on the clipboard, in the appropriate format.
            If lPicType = CF_BITMAP Then
                hCopy = CopyImage(hPtr, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
            Else
                hCopy = CopyEnhMetaFile(hPtr, vbNullString)
            End If
    
            'Release the clipboard to other programs
            H = CloseClipboard
    
            'If we got a handle to the image, convert it into a Picture object and return it
            If hPtr <> 0 Then Set PastePictureWin32 = CreatePicture(hCopy, 0, lPicType)
        End If
    End If


End Function




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: CreatePicture
'''
''' Purpose:    Converts a image (and palette) handle into a Picture object.
'''
'''             Requires a reference to the "OLE Automation" type library
'''
''' Arguments:  None
'''
''' Date        Developer           Action
''' --------------------------------------------------------------------------
''' 30 Oct 98  Stephen Bullen      Created
'''

 
 
' Subroutine    : fnOLEError
' Purpose       : Gets the message text for standard OLE errors
 
Private Function fnOLEError(lErrNum As Long) As String
    'OLECreatePictureIndirect return values
    Const E_ABORT = &H80004004
    Const E_ACCESSDENIED = &H80070005
    Const E_FAIL = &H80004005
    Const E_HANDLE = &H80070006
    Const E_INVALIDARG = &H80070057
    Const E_NOINTERFACE = &H80004002
    Const E_NOTIMPL = &H80004001
    Const E_OUTOFMEMORY = &H8007000E
    Const E_POINTER = &H80004003
    Const E_UNEXPECTED = &H8000FFFF
    Const S_OK = &H0
 
    Select Case lErrNum
        Case E_ABORT
            fnOLEError = " Aborted"
        Case E_ACCESSDENIED
            fnOLEError = " Access Denied"
        Case E_FAIL
            fnOLEError = " General Failure"
        Case E_HANDLE
            fnOLEError = " Bad/Missing Handle"
        Case E_INVALIDARG
            fnOLEError = " Invalid Argument"
        Case E_NOINTERFACE
            fnOLEError = " No Interface"
        Case E_NOTIMPL
            fnOLEError = " Not Implemented"
        Case E_OUTOFMEMORY
            fnOLEError = " Out of Memory"
        Case E_POINTER
            fnOLEError = " Invalid Pointer"
        Case E_UNEXPECTED
            fnOLEError = " Unknown Error"
        Case S_OK
            fnOLEError = " Success!"
    End Select
End Function
 
' Routine   : SaveClip2Bit
' Purpose   : Saves Picture object to desired location.
' Arguments : Path to save the file
 
Public Sub SaveClip2Bit(savePath As String)
On Error GoTo errHandler:
    
    SavePicture PastePictureWin32, savePath
errExit:
        Exit Sub
errHandler:
    Debug.Print "Save Picture: (" & Err.Number & ") - " & Err.Description
    Resume errExit
End Sub
 














Public Function GenerateGUID() As String
    Dim ID(0 To 15) As Byte
    Dim N As Long
    Dim GUID As String
    Dim Res As Long
    Res = CoCreateGuid(ID(0))

    For N = 0 To 15
        GUID = GUID & IIf(ID(N) < 16, "0", "") & Hex$(ID(N))
        If Len(GUID) = 8 Or Len(GUID) = 13 Or Len(GUID) = 18 Or Len(GUID) = 23 Then
            GUID = GUID & "-"
        End If
    Next N
    GenerateGUID = GUID
End Function


Sub GerarCardImages()
'
'

Dim wrdTbl
Dim ColCount
Dim RowCount
Dim i, a
Dim tblCount

tblCount = ActiveDocument.Tables.Count
For a = 1 To tblCount
Set wrdTbl = ActiveDocument.Tables(a)

    '~~> Get the word table Row and Column Counts
     ColCount = wrdTbl.Columns.Count
    RowCount = wrdTbl.Rows.Count
'
Dim strGuid
Dim myCells As Range


With ActiveDocument
    
    For i = 1 To RowCount
        'só importa se tabela
       ColCount = .Tables(a).Rows(i).Cells.Count
        If (UCase(.Tables(a).Cell(i, ColCount - 1).Range.Text) = ("X") & Chr(13) & Chr(7)) Then
            .Tables(a).Cell(i, ColCount - 1).Range.Text = ""

   
       
            If (.Tables(a).Cell(i, ColCount).Range.Text = Chr(13) & Chr(7)) Then
                .Tables(a).Cell(i, ColCount).Range.Text = GenerateGUID()
                .Tables(a).Cell(i, ColCount).Range.Select
                'pinta de preto
                Selection.Shading.Texture = wdTextureNone
                Selection.Shading.ForegroundPatternColor = wdColorAutomatic
                Selection.Shading.BackgroundPatternColor = -587137025

            End If
            
            strGuid = Replace(.Tables(a).Cell(i, ColCount).Range.Text, "{", "")
            strGuid = Replace(strGuid, "}", "")
            strGuid = Replace(strGuid, "-", "")
            strGuid = Mid(strGuid, 1, Len(strGuid) - 2)
    
            Set myCells = .Range(start:=.Tables(a).Cell(i, 2).Range.start, _
            End:=.Tables(a).Cell(i, ColCount - 2).Range.End)
            myCells.Select
            Selection.Copy
        
    
        
        
            Set myCells = .Range(start:=.Tables(a).Cell(i, ColCount - 1).Range.start, _
            End:=.Tables(a).Cell(i, ColCount - 1).Range.End)
            myCells.Select
            Selection.PasteSpecial Link:=False, DataType:=wdPasteEnhancedMetafile, Placement:=wdInLine, _
            DisplayAsIcon:=False
            Set myCells = .Range(start:=.Tables(a).Cell(i, ColCount - 1).Range.start, _
                 End:=.Tables(a).Cell(i, ColCount - 1).Range.End)
            myCells.Select
            SaveClip2Bit ("c:\temp\" & strGuid + "_B.emf")
            
            Selection.Delete
             
             
             
             Set myCells = .Range(start:=.Tables(a).Cell(i, 1).Range.start, _
                 End:=.Tables(a).Cell(i, 1).Range.End)
             myCells.Select
                 Selection.Copy
             
             Set myCells = .Range(start:=.Tables(a).Cell(i, ColCount - 1).Range.start, _
                 End:=.Tables(a).Cell(i, ColCount - 1).Range.End)
             myCells.Select
             Selection.PasteSpecial Link:=False, DataType:=wdPasteEnhancedMetafile, Placement:=wdInLine, _
             DisplayAsIcon:=False
            Set myCells = .Range(start:=.Tables(a).Cell(i, ColCount - 1).Range.start, _
                 End:=.Tables(a).Cell(i, ColCount - 1).Range.End)
             myCells.Select
            SaveClip2Bit ("c:\temp\" & strGuid + "_F.emf")
            
             Selection.Delete
            
    End If
    Next
    
    
    
     
   
   
    End With
'
Next

ActiveDocument.Save

End Sub

Sub Macro1()
'
' Macro1 Macro
'
'
    Selection.Shading.Texture = wdTextureNone
    Selection.Shading.ForegroundPatternColor = wdColorAutomatic
    Selection.Shading.BackgroundPatternColor = -587137025
End Sub

