Option Explicit
Option Compare Text


''' User-Defined Types for API Calls


'Declare a UDT to store a GUID for the IPicture OLE Interface
Private Type guid
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type


'''Windows API Function Declarations
#If VBA7 Then


Private Type uPicDesc
    Size As Long
    Type As Long
    hPic As LongPtr
    hPal As LongPtr
End Type



Private Type GUID_TYPE
        '// Vars
        Data1 As Long
        Data2 As Integer
        Data3 As Integer
        Data4(7) As Byte
    End Type
    
    

 #If VBA7 Then
        Private Declare PtrSafe Function CoCreateGuid Lib "ole32.dll" (guid As GUID_TYPE) As LongPtr
        Private Declare PtrSafe Function StringFromGUID2 Lib "ole32.dll" (guid As GUID_TYPE, ByVal lpStrGuid As LongPtr, ByVal cbMax As Long) As LongPtr
    #Else
        Private Declare Function CoCreateGuid Lib "ole32.dll" (guid As GUID_TYPE) As Long
        Private Declare Function StringFromGUID2 Lib "ole32.dll" (guid As GUID_TYPE, ByVal lpStrGuid As LongPtr, ByVal cbMax As Long) As Long
    #End If





'Does the clipboard contain a bitmap/metafile?
Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Integer) As Long


'Open the clipboard to read
Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hWnd As LongPtr) As Long


'Get a pointer to the bitmap/metafile
Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As LongPtr


'Close the clipboard
Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long


'Convert the handle into an OLE IPicture interface.
Private Declare PtrSafe Function OleCreatePictureIndirect Lib "oleaut32.dll" (PicDesc As uPicDesc, RefIID As guid, ByVal fPictureOwnsHandle As LongPtr, IPic As IPicture) As Long


'Create our own copy of the metafile, so it doesn't get wiped out by subsequent clipboard updates.
Declare PtrSafe Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As LongPtr, ByVal lpszFile As String) As LongPtr


'Create our own copy of the bitmap, so it doesn't get wiped out by subsequent clipboard updates.
Declare PtrSafe Function CopyImage Lib "user32" (ByVal Handle As LongPtr, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As LongPtr


#Else


'Declare a UDT to store the bitmap information
Private Type uPicDesc
    Size As Long
    Type As Long
    hPic As Long
    hPal As Long
End Type


'Does the clipboard contain a bitmap/metafile?
Private Declare Function IsClipboardFormatAvailable Lib "user32" (ByVal wFormat As Integer) As Long


'Open the clipboard to read
Private Declare Function OpenClipboard Lib "user32" (ByVal hWnd As Long) As Long


'Get a pointer to the bitmap/metafile
Private Declare Function GetClipboardData Lib "user32" (ByVal wFormat As Integer) As Long


'Close the clipboard
Private Declare Function CloseClipboard Lib "user32" () As Long


'Convert the handle into an OLE IPicture interface.
Private Declare Function OleCreatePictureIndirect Lib "olepro32.dll" (PicDesc As uPicDesc, RefIID As GUID, ByVal fPictureOwnsHandle As Long, IPic As IPicture) As Long


'Create our own copy of the metafile, so it doesn't get wiped out by subsequent clipboard updates.
Declare Function CopyEnhMetaFile Lib "gdi32" Alias "CopyEnhMetaFileA" (ByVal hemfSrc As Long, ByVal lpszFile As String) As Long


'Create our own copy of the bitmap, so it doesn't get wiped out by subsequent clipboard updates.
Declare Function CopyImage Lib "user32" (ByVal Handle As Long, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As Long


#End If




'The API format types we're interested in
Const CF_BITMAP = 2
Const CF_PALETTE = 9
Const CF_ENHMETAFILE = 14
Const IMAGE_BITMAP = 0
Const LR_COPYRETURNORG = &H4


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: PastePicture
'''
''' Purpose:    Get a Picture object showing whatever's on the clipboard.
'''
''' Arguments:  lXlPicType - The type of picture to create.  Can be one of:
'''                          xlPicture to create a metafile (default)
'''                          xlBitmap to create a bitmap
'''
''' Date        Developer           Action
''' ------------------------------------------------------c--------------------
''' 30 Oct 98   Stephen Bullen      Created
''' 15 Nov 98   Stephen Bullen      Updated to create our own copies of the clipboard images
'''


Function PastePicture(Optional lXlPicType As Long = xlPicture) As IPicture


#If VBA7 Then
Set PastePicture = PastePictureVBA7(lXlPicType)
#Else
PastePictureWin32 (lXlPicType)
#End If


End Function


Function PastePictureVBA7(Optional lXlPicType As Long = xlPicture) As IPicture


    'Some pointers
    Dim H As Long, hPicAvail As Long, hPtr As LongPtr, hPal As LongPtr, lPicType As Long, hCopy As LongPtr
    
    'Convert the type of picture requested from the xl constant to the API constant
    lPicType = IIf(lXlPicType = xlBitmap, CF_BITMAP, CF_ENHMETAFILE)
    
    'Check if the clipboard contains the required format
    hPicAvail = IsClipboardFormatAvailable(lPicType)
    
    If hPicAvail <> 0 Then
        'Get access to the clipboard
        H = OpenClipboard(0&)
    
        If H > 0 Then
            'Get a handle to the image data
            hPtr = GetClipboardData(lPicType)
    
            'Create our own copy of the image on the clipboard, in the appropriate format.
            If lPicType = CF_BITMAP Then
                hCopy = CopyImage(hPtr, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
            Else
                hCopy = CopyEnhMetaFile(hPtr, vbNullString)
            End If
    
            'Release the clipboard to other programs
            H = CloseClipboard
    
            'If we got a handle to the image, convert it into a Picture object and return it
            Dim temp As IPicture
            Set temp = CreatePictureVBA7(hCopy, 0, lPicType)
            
            If hPtr <> 0^ Then Set PastePictureVBA7 = temp
        End If
    End If


End Function
Private Function CreatePictureVBA7(ByVal hPic As LongPtr, ByVal hPal As LongPtr, ByVal lPicType) As IPicture


' IPicture requires a reference to "OLE Automation"
Dim r As Long, uPicInfo As uPicDesc, IID_IDispatch As guid, IPic As IPicture


'OLE Picture types
Const PICTYPE_BITMAP = 1
Const PICTYPE_ENHMETAFILE = 4


' Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
    .Data1 = &H7BF80980
    .Data2 = &HBF32
    .Data3 = &H101A
    .Data4(0) = &H8B
    .Data4(1) = &HBB
    .Data4(2) = &H0
    .Data4(3) = &HAA
    .Data4(4) = &H0
    .Data4(5) = &H30
    .Data4(6) = &HC
    .Data4(7) = &HAB
End With


' Fill uPicInfo with necessary parts.
With uPicInfo
    .Size = Len(uPicInfo)                                                   ' Length of structure.
    .Type = IIf(lPicType = CF_BITMAP, PICTYPE_BITMAP, PICTYPE_ENHMETAFILE)  ' Type of Picture
    .hPic = hPic                                                            ' Handle to image.
    .hPal = IIf(lPicType = CF_BITMAP, hPal, 0)                              ' Handle to palette (if bitmap).
End With
     
    ' Create the Picture object.
r = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, 1, IPic)


' If an error occured, show the description
If r <> 0 Then Debug.Print "Create Picture: " & fnOLEError(r)


' Return the new Picture object.
Set CreatePictureVBA7 = IPic


End Function



Private Function CreatePicture(ByVal hPic As Long, ByVal hPal As Long, ByVal lPicType) As IPicture


' IPicture requires a reference to "OLE Automation"
Dim r As Long, uPicInfo As uPicDesc, IID_IDispatch As guid, IPic As IPicture


'OLE Picture types
Const PICTYPE_BITMAP = 1
Const PICTYPE_ENHMETAFILE = 4


' Create the Interface GUID (for the IPicture interface)
With IID_IDispatch
    .Data1 = &H7BF80980
    .Data2 = &HBF32
    .Data3 = &H101A
    .Data4(0) = &H8B
    .Data4(1) = &HBB
    .Data4(2) = &H0
    .Data4(3) = &HAA
    .Data4(4) = &H0
    .Data4(5) = &H30
    .Data4(6) = &HC
    .Data4(7) = &HAB
End With


' Fill uPicInfo with necessary parts.
With uPicInfo
    .Size = Len(uPicInfo)                                                   ' Length of structure.
    .Type = IIf(lPicType = CF_BITMAP, PICTYPE_BITMAP, PICTYPE_ENHMETAFILE)  ' Type of Picture
    .hPic = hPic                                                            ' Handle to image.
    .hPal = IIf(lPicType = CF_BITMAP, hPal, 0)                              ' Handle to palette (if bitmap).
End With


' Create the Picture object.
r = OleCreatePictureIndirect(uPicInfo, IID_IDispatch, True, IPic)


' If an error occured, show the description
If r <> 0 Then Debug.Print "Create Picture: " & fnOLEError(r)


' Return the new Picture object.
Set CreatePicture = IPic


End Function
Function PastePictureWin32(Optional lXlPicType As LongLong = xlPicture) As IPicture


    'Some pointers
    Dim H As Long, hPicAvail As Long, hPtr As LongPtr, hPal As Long, lPicType As Long, hCopy As LongPtr
    
    'Convert the type of picture requested from the xl constant to the API constant
    lPicType = IIf(lXlPicType = xlBitmap, CF_BITMAP, CF_ENHMETAFILE)
    
    'Check if the clipboard contains the required format
    hPicAvail = IsClipboardFormatAvailable(lPicType)
    
    If hPicAvail <> 0 Then
        'Get access to the clipboard
        H = OpenClipboard(0&)
    
        If H > 0 Then
            'Get a handle to the image data
            hPtr = GetClipboardData(lPicType)
    
            'Create our own copy of the image on the clipboard, in the appropriate format.
            If lPicType = CF_BITMAP Then
                hCopy = CopyImage(hPtr, IMAGE_BITMAP, 0, 0, LR_COPYRETURNORG)
            Else
                hCopy = CopyEnhMetaFile(hPtr, vbNullString)
            End If
    
            'Release the clipboard to other programs
            H = CloseClipboard
    
            'If we got a handle to the image, convert it into a Picture object and return it
            If hPtr <> 0 Then Set PastePictureWin32 = CreatePicture(hCopy, 0, lPicType)
        End If
    End If


End Function




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Subroutine: CreatePicture
'''
''' Purpose:    Converts a image (and palette) handle into a Picture object.
'''
'''             Requires a reference to the "OLE Automation" type library
'''
''' Arguments:  None
'''
''' Date        Developer           Action
''' --------------------------------------------------------------------------
''' 30 Oct 98  Stephen Bullen      Created
'''

 
 
' Subroutine    : fnOLEError
' Purpose       : Gets the message text for standard OLE errors
 
Private Function fnOLEError(lErrNum As Long) As String
    'OLECreatePictureIndirect return values
    Const E_ABORT = &H80004004
    Const E_ACCESSDENIED = &H80070005
    Const E_FAIL = &H80004005
    Const E_HANDLE = &H80070006
    Const E_INVALIDARG = &H80070057
    Const E_NOINTERFACE = &H80004002
    Const E_NOTIMPL = &H80004001
    Const E_OUTOFMEMORY = &H8007000E
    Const E_POINTER = &H80004003
    Const E_UNEXPECTED = &H8000FFFF
    Const S_OK = &H0
 
    Select Case lErrNum
        Case E_ABORT
            fnOLEError = " Aborted"
        Case E_ACCESSDENIED
            fnOLEError = " Access Denied"
        Case E_FAIL
            fnOLEError = " General Failure"
        Case E_HANDLE
            fnOLEError = " Bad/Missing Handle"
        Case E_INVALIDARG
            fnOLEError = " Invalid Argument"
        Case E_NOINTERFACE
            fnOLEError = " No Interface"
        Case E_NOTIMPL
            fnOLEError = " Not Implemented"
        Case E_OUTOFMEMORY
            fnOLEError = " Out of Memory"
        Case E_POINTER
            fnOLEError = " Invalid Pointer"
        Case E_UNEXPECTED
            fnOLEError = " Unknown Error"
        Case S_OK
            fnOLEError = " Success!"
    End Select
End Function
 
' Routine   : SaveClip2Bit
' Purpose   : Saves Picture object to desired location.
' Arguments : Path to save the file
 
Public Sub SaveClip2Bit(savePath As String)
On Error GoTo errHandler:
Dim hPic As IPicture
  ' SavePicture PastePictureWin32, savePath
   
   Set hPic = PastePicture
  SavePicture hPic, savePath

errExit:
        Exit Sub
errHandler:
    Debug.Print "Save Picture: (" & Err.Number & ") - " & Err.Description
    Resume errExit
End Sub
 '==================================================================================================
' ## Function to call Windows API and grab a GUID
'    Using this method as July 2017 Windows 10 security update
'    throws a permission denied error trying to use: CreateObject("Scriptlet.TypeLib")
'==================================================================================================
Function CreateGuidString(Optional AddHyphens As Boolean, _
                          Optional AddBraces As Boolean) _
                          As String
    '// Vars
    Dim guid As GUID_TYPE
    Dim strGuid As String
    Dim retValue As LongPtr

    '// registry GUID format with null
    '   terminator {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
    Const guidLength As Long = 39

    retValue = CoCreateGuid(guid)

    '// Get the raw GUID which includes braces and hyphens
    If retValue = 0 Then
        strGuid = String$(guidLength, vbNullChar)
        retValue = StringFromGUID2(guid, StrPtr(strGuid), guidLength)
        If retValue = guidLength Then
            CreateGuidString = strGuid
        End If
    End If

    '// If AddHyphens is switched from the default True to False,
    '   remove them from the GUID
    If Not AddHyphens Then
        CreateGuidString = Replace(CreateGuidString, "-", vbNullString, Compare:=vbTextCompare)
    End If

    '// If AddBraces is True from the default False to True,
    '   leave those curly braces be!
    If Not AddBraces Then
        CreateGuidString = Replace(CreateGuidString, "{", vbNullString, Compare:=vbTextCompare)
        CreateGuidString = Replace(CreateGuidString, "}", vbNullString, Compare:=vbTextCompare)
    End If
End Function

Public Function GenerateGUID() As String
    Dim ID(0 To 15) As Byte
    Dim N As Long
    Dim guid As String
    Dim Res As Long
    Res = CoCreateGuid(ID(0))

    For N = 0 To 15
        guid = guid & IIf(ID(N) < 16, "0", "") & Hex$(ID(N))
       ' If Len(guid) = 8 Or Len(guid) = 13 Or Len(guid) = 18 Or Len(guid) = 23 Then
        '    guid = guid & "-"
       ' End If
    Next N
    GenerateGUID = guid
End Function
Sub TextFile_Create(strPath As String, guid, dados As String)
'PURPOSE: Create A New Text File


Dim TextFile As Integer



'Determine the next file number available for use by the FileOpen function
  TextFile = FreeFile

'Open the text file
  Open strPath + guid + ".txt" For Output As TextFile

'Write some lines of text
  Print #TextFile, dados
  
'Save & Close Text File
  Close TextFile

End Sub
Function linebreak(myString)
    If Len(myString) >= 2 Then
        If Right$(myString, 2) = vbCrLf Or Right$(myString, 2) = vbNewLine Or Right$(myString, 2) = Chr(13) & Chr(7) Then
            linebreak = Left$(myString, Len(myString) - 2)
        Else
            linebreak = myString
        End If
    End If
End Function
Function getChildMaxIndex(start, table)
Dim i
Dim maxIndex
Dim ColCount
      
Dim key
ColCount = table.Rows(start).Cells.Count
key = formatGuid(table.Cell(start, ColCount).Range.Text)

For i = start To table.Rows.Count
  

      ColCount = table.Rows(i).Cells.Count
       

      If (formatGuid(table.Cell(i, ColCount).Range.Text) = Mid(key, 1, 32)) Then
        
           getChildMaxIndex = getIndexFromGUID(formatGuid(table.Cell(i, ColCount).Range.Text))
    Else
        getChildMaxIndex = 0
        Exit Function
        
      End If
Next
      
End Function

Function getChildIndexList(start, table) As String
Dim i
Dim index
Dim ColCount
Dim ret As String

ret = ""
      
Dim key
ColCount = table.Rows(start).Cells.Count
key = formatGuid(table.Cell(start, ColCount).Range.Text)

For i = start To table.Rows.Count
  

      ColCount = table.Rows(i).Cells.Count
       

      If (Mid(formatGuid(table.Cell(i, ColCount).Range.Text), 1, 32) = Mid(key, 1, 32)) Then
        index = getIndexFromGUID(formatGuid(table.Cell(i, ColCount).Range.Text))
        If (index <> "0") Then
           ret = ret + " " + Str(index)
        End If
    Else
        getChildIndexList = Trim(ret)
        Exit Function
        
      End If
Next
 getChildIndexList = Trim(ret)
      
End Function

Function findParentRowNumber(table, key, childPos)
 
 Dim i
 Dim dados
 Dim ColCount
 findParentRowNumber = 0
 For i = childPos To 1 Step -1
        
        
    ColCount = table.Rows(i).Cells.Count
       

      If (formatGuid(table.Cell(i, ColCount).Range.Text) = Mid(key, 1, 32)) Then
           findParentRowNumber = i
           Exit Function
          
        
      End If
Next

End Function
Function getIndexFromGUID(strGuid) As Integer
                If (InStr(1, strGuid, "_") <> 0) Then
                    getIndexFromGUID = CInt(Mid(Mid(strGuid, 1, 38), InStr(1, strGuid, "_") + 1))
                     'TODO: testar com índice 10
                Else
                    getIndexFromGUID = 0
                End If
                
End Function
Sub GerarCardImages()
'
'

Dim wrdTbl
Dim ColCount
Dim RowCount
Dim i, a
Dim tblCount
 Dim dados As String
tblCount = ActiveDocument.Tables.Count
For a = 1 To tblCount
Set wrdTbl = ActiveDocument.Tables(a)

    '~~> Get the word table Row and Column Counts
     ColCount = wrdTbl.Columns.Count
    RowCount = wrdTbl.Rows.Count
'
Dim strGuid
Dim novo As Boolean
Dim myCells As Range
Dim index As Integer

novo = False

DeleteFile ("c:\temp\end.txt")

With ActiveDocument
    
    For i = 1 To RowCount
        
       
       ColCount = .Tables(a).Rows(i).Cells.Count
       

      If (.Tables(a).Cell(i, ColCount).Range.Text <> Chr(13) & Chr(7)) Then
            
              strGuid = formatGuid(.Tables(a).Cell(i, ColCount).Range.Text)
        
      End If
        If (UCase(.Tables(a).Cell(i, ColCount - 1).Range.Text) = ("C") & Chr(13) & Chr(7)) Then
             .Tables(a).Cell(i, ColCount - 1).Range.Text = ""
           
            
           If (strGuid <> formatGuid(.Tables(a).Cell(i, ColCount).Range.Text)) Then 'LINHA nova (sem GUID)
                index = getIndexFromGUID(strGuid)
                
                novo = True
                
                If (index <> 0) Then
                
                    strGuid = Mid(strGuid, 1, Len(strGuid) - 1) & index + 1 'guid_ + index
                Else
                    strGuid = strGuid + Trim("_1")  'guid + _ + index
             End If
        End If
            
            
            
             
                    .Tables(a).Cell(i, ColCount).Range.Text = strGuid
                    .Tables(a).Cell(i, ColCount).Range.Select
                    'pinta de COR
                    Selection.Shading.Texture = wdTextureNone
                    Selection.Shading.ForegroundPatternColor = wdColorAutomatic
                    Selection.Shading.BackgroundPatternColor = wdColorTurquoise
    
           
                
                 processTablesImages ActiveDocument, strGuid, i, ColCount, .Tables(a)
                
                 dados = ParseDados(.Tables(a), i)
                 
                 TextFile_Create "c:\temp\", Mid(strGuid, 1, 32), dados
                
        End If
      
        If (UCase(.Tables(a).Cell(i, ColCount - 1).Range.Text) = ("X") & Chr(13) & Chr(7)) Then
            .Tables(a).Cell(i, ColCount - 1).Range.Text = ""

   
       
            If (.Tables(a).Cell(i, ColCount).Range.Text = Chr(13) & Chr(7)) Then
                novo = True
                .Tables(a).Cell(i, ColCount).Range.Text = CreateGuidString(False, False)
                .Tables(a).Cell(i, ColCount).Range.Select
                'pinta de preto
                Selection.Shading.Texture = wdTextureNone
                Selection.Shading.ForegroundPatternColor = wdColorAutomatic
                Selection.Shading.BackgroundPatternColor = -587137025

            End If
            
            strGuid = formatGuid(.Tables(a).Cell(i, ColCount).Range.Text)
    
            processTablesImages ActiveDocument, strGuid, i, ColCount, .Tables(a)
            
            
                 dados = ParseDados(.Tables(a), i)
                 
                 TextFile_Create "c:\temp\", strGuid, dados
            
    End If
    Next
    
    If (novo) Then
     TextFile_Create "c:\temp\", "end_novo", ""
    Else
    
     TextFile_Create "c:\temp\", "end", ""
    End If
    
    
     
   
   
    End With

Next



End Sub
Function formatGuid(strGuid)

    strGuid = Replace(strGuid, "{", "")
            strGuid = Replace(strGuid, "}", "")
            strGuid = Replace(strGuid, "-", "")
            strGuid = Replace(strGuid, Chr(0), "")
            strGuid = Replace(strGuid, Chr(7), "")
            formatGuid = Replace(strGuid, Chr(13), "")
            
End Function
Function ParseDados(table, i) As String
Dim ret As String

Dim parentRowIndex
Dim texto As String
             Dim fields(10) As String
             
             parentRowIndex = findParentRowNumber(table, formatGuid(table.Cell(i, table.Rows(i).Cells.Count).Range.Text), i)
             texto = table.Cell(parentRowIndex, 1).Range.Text
             Dim pos1 As Integer
             Dim pos2 As Integer
             pos1 = InStr(1, texto, "**")
             pos2 = InStr(pos1 + 2, texto, "**")
             
             
            
             If (pos2 > pos1) Then
                ret = Mid(texto, pos1 + 2, pos2 - pos1 - 2)
            End If
            ret = ret & " C:" & getChildIndexList(parentRowIndex, table)

ParseDados = ret
End Function
Sub processTablesImages(activeDoc, strGuid, i, ColCount, table)
Dim myCells
With activeDoc
 Set myCells = .Range(start:=table.Cell(i, 2).Range.start, _
            End:=table.Cell(i, ColCount - 2).Range.End)
        
           myCells.Select
            
           
           Selection.CopyAsPicture
         
            Call Paste2("c:\temp\" & strGuid + "_B.emf", ActiveDocument, myCells)
             
            Set myCells = .Range(start:=table.Cell(i, 1).Range.start, _
                 End:=table.Cell(i, 1).Range.End)
            myCells.Select
            Selection.CopyAsPicture
            
            Call Paste2("c:\temp\" & strGuid + "_F.emf", ActiveDocument, myCells)
End With
End Sub
Function ClipBoard_GetData()
   Dim hClipMemory As LongPtr
   Dim lpClipMemory As Long
   Dim myString As String
   Dim RetVal As Long
 
   If OpenClipboard(0&) = 0 Then
      MsgBox "Cannot open Clipboard. Another app. may have it open"
      Exit Function
   End If
          
   ' Obtain the handle to the global memory
   ' block that is referencing the text.
   hClipMemory = GetClipboardData(CF_TEXT)
   If IsNull(hClipMemory) Then
      MsgBox "Could not allocate memory"
      GoTo OutOfHere
   End If
 
   ' Lock Clipboard memory so we can reference
   ' the actual data string.
   lpClipMemory = GlobalLock(hClipMemory)
 
   If Not IsNull(lpClipMemory) Then
      myString = Space$(MAXSIZE)
      RetVal = lstrcpy(myString, lpClipMemory)
      RetVal = GlobalUnlock(hClipMemory)
       
      ' Peel off the null terminating character.
      myString = Mid(myString, 1, InStr(1, myString, Chr$(0), 0) - 1)
   Else
      MsgBox "Could not lock memory to copy string from."
   End If
 
OutOfHere:
 
   RetVal = CloseClipboard()
   ClipBoard_GetData = myString
 
End Function
Sub FindInSelection()
  Dim strFindText1 As String
   Dim strFindText2 As String
  Dim strReplaceText As String
 
 Dim myRange
 
  strFindText1 = ClipBoard_GetData
  
  strFindText2 = Mid(strFindText1, 1, 8) + "-" + Mid(strFindText1, 9, 4) + "-" + Mid(strFindText1, 13, 4) + "-" + Mid(strFindText1, 17, 4) + "-" + Mid(strFindText1, 21, 12)
 Set myRange = ActiveDocument.Content

  With myRange.Find
    .Text = strFindText2
    .Forward = True
    .Wrap = wdFindStop
    .Format = False
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = False
    .MatchSoundsLike = False
    .MatchAllWordForms = False
  End With
  If myRange.Find.Execute(FindText:=strFindText2) Then myRange.Select
End Sub



Private Sub Paste(strPath, ActiveDocument, myCells)

With ActiveDocument
          Set myCells = .Range(start:=.Tables(1).Cell(1, 1).Range.start, _
            End:=.Tables(1).Cell(1, 1).Range.End)
            myCells.Select
           Dim tmpStart
            tmpStart = Timer
            Do
                DoEvents
            Loop While (tmpStart + 1) > Timer
            Selection.PasteSpecial Link:=False, DataType:=wdPasteEnhancedMetafile, Placement:=wdInLine, _
            DisplayAsIcon:=False
 

           tmpStart = Timer
            Do
                DoEvents
            Loop While (tmpStart + 1) > Timer
            SaveClip2Bit (strPath)
            
            Selection.Delete
End With
End Sub


Private Sub Paste2(strPath, ActiveDocument, myCells)

With ActiveDocument
          
           Dim tmpStart
           
 

           tmpStart = Timer
            Do
                DoEvents
            Loop While (tmpStart + 1) > Timer
            SaveClip2Bit (strPath)
            
           
End With
End Sub

Sub DeleteFile(ByVal FileToDelete As String)
   If FileExists(FileToDelete) Then 'See above
      ' First remove readonly attribute, if set
      SetAttr FileToDelete, vbNormal
      ' Then delete the file
      Kill FileToDelete
   End If
End Sub
Function FileExists(ByVal FileToTest As String) As Boolean
   FileExists = (Dir(FileToTest) <> "")
End Function



